
env_list = ["py{310,311,312,313}"]
requires = ["tox-ignore-env-name-mismatch"]
skip_missing_interpreters = true

[env_run_base]
description = "Main testing environment"
pass_env = ["HOME", "DISPLAY", "WAYLAND_DISPLAY", "QT_QPA_PLATFORM", "XAUTHORITY", "GITHUB_ACTIONS", "PYTHON_CPU_COUNT"]
env_dir = "{toxworkdir}{/}env_static"
runner = "ignore_env_name_mismatch"
deps = ["pylint"]
extras = ["tests", "docs"]
commands = [
    ["coverage", "run", "-p", "--source=optrace", "--branch", "-m", 
        "pytest", {replace="posargs", extend=true}, "tests{/}test_geometry.py", "tests{/}test_misc.py", 
        "tests{/}test_image.py", "tests{/}test_refraction_index.py", "tests{/}test_scope.py", 
        "tests{/}test_spectrum.py", "tests{/}test_surface.py", "tests{/}test_tma.py"
    ],
    ["coverage", "run", "-p", "--source=optrace", "--branch", "-m", 
        "pytest", {replace="posargs", extend=true}, "tests{/}test_color.py", "tests{/}test_convolve.py", 
        "tests{/}test_load.py", "tests{/}test_tracer.py", "tests{/}test_tracer_special.py"
    ],
    ["coverage", "run", "-p", "--source=optrace", "--branch", "-m", 
        "pytest", {replace="posargs", extend=true}, "tests{/}test_plots.py"
    ],
    ["coverage", "run", "-p", "--source=optrace", "--branch", "-m",
        "pytest", {replace="posargs", extend=true}, "-m", "gui1", "tests{/}test_gui.py"
    ],
    ["coverage", "run", "-p", "--source=optrace", "--branch", "-m", 
        "pytest", {replace="posargs", extend=true}, "-m", "gui2", "tests{/}test_gui.py"
    ],
    ["coverage", "run", "-p", "--source=optrace", "--branch", "-m", 
        "pytest", {replace="posargs", extend=true}, "-m", "gui3", "tests{/}test_gui.py"
    ],
    ["coverage", "run", "-p", "--source=optrace", "--branch", "-m", 
        "pytest", {replace="posargs", extend=true}, "tests{/}test_examples.py"
    ],
    ["coverage", "combine"],
    ["coverage", "report", "--show-missing"],
    ["coverage", "erase"]
]

[env.os]
description = "Testing of system dependent functionality"
commands = [["pytest", "-m", "os", {replace="posargs", extend=true}]]

[env.fast]
description = "Don't test slower tests (> 10 seconds)"
commands = [["pytest", "-m", "not slow", {replace="posargs", extend=true}]]

[env.linkcheck]
description = "Check all links in software and documentation"
commands = [["sphinx-build", "-M", "linkcheck", "docs{/}source", "docs{/}build", "-j", "auto"]]

[env.docsbuildcheck]
description = "Nitpicky documentation building, turn warnings into errors"
commands = [["sphinx-build", "-M", "html", "docs{/}source", "docs{/}build{/}htmlcheck", "-n", "-W", "-j", "auto"]]

[env.doctest]
description = "Test documentation doctest snippets"
commands = [["sphinx-build", "-M", "doctest", "docs{/}source", "docs{/}build", "-j", "auto"]]

[env.docs]
description = "Create documentation and update structure and changelog"
allowlist_externals = ["{/}usr{/}bin{/}bash"]
commands = [
    ["bash", "docs{/}generate_changelog.sh"],
    ["bash", "docs{/}generate_bib_structure.sh"],
    ["sphinx-build", "-M", "html", "docs{/}source", "docs{/}build", "-n", "-j", "auto"]
]

[env.pylint]
description = "Run pylint with excluded unnecessary rules"
skip_install = true
commands = [
    ["pylint", "optrace", "-j", "0", "--max-line-length", "120", "--variable-naming-style", "any",
    "--disable", "W0612,W0613,W0106,W0212,E1101,R0902,R0904,R0911,R0912,R0913,R0914,R0915,R0916,C0301,C0302",
    "--good-names-rgxs", "^[_a-z][_a-z0-9]?$"]
]

