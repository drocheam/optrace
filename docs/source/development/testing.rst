Testing
---------------

.. role:: python(code)
  :language: python
  :class: highlight

.. role:: bash(code)
  :language: bash
  :class: highlight

**Goal**

* automated testing of functionality and edge cases
* 100% coverage, all branches and source code lines get executed at least once
* testing of the installation of the required packages on a clean system
* testing of multiple platforms (Linux, Windows, macOS)
* test multithreading with different number of cores
* future goal: support of multiple python versions (>= Python 3.10)


**Main Testing**

* done by `tox <https://tox.wiki/en/latest/>`_, this creates a virtual environment where the library is installed and tested
* :mod:`pytest` runs all test cases
* :mod:`coverage` wraps around  and reports on executed and missing lines
* see the `tox.ini <https://github.com/drocheam/optrace/blob/main/tox.ini>`_ file for details
* test files can be found under `tests/ <https://github.com/drocheam/optrace/blob/main/tests/>`_, starting with filename :bash:`test_`


**Test Cases**

* :mod:`doctest` for documentation strings in some non-class functions
* test cases are handled with :mod:`unittest`, testing is however typically done by :mod:`pytest` that loads and executed the created TestSuites
* :python:`TraceGUI` has a :python:`debug` method, which runs a separate thread, from which actions are executed:
   * Note that each UI actions needs to be run in the main thread, for this :python:`TraceGUI` provides :python:`_do_in_main` and :python:`_set_in_main` methods
   * generally we want to do an action, after the old one has finished. For this :python:`TraceGUI._wait_for_idle` is implemented.


**Platform and version testing**

* platform tests are done with a github workflow, that executes some platform dependent test. These include:
   * loading and saving of files
   * handling of filenames and paths
   * opening the gui and plots
   * detecting the number of cores
* python version testing: currently does the same as platform testing, however some libraries don't support Python 3.11 yet


**Github Workflows**

* see `.github/workflows/ <https://github.com/drocheam/optrace/blob/main/.github/workflows/>`_
* Actions: Main testing, OS Compatibility, Python 3.10 Compatibility
* all get run on a push the repository or can get run manually

**Notebook/Spyder testing**

* Installation:
    * see https://docs.spyder-ide.org/current/installation.html
    * :bash:`python3 -m venv spyder-env`
    * :bash:`source spyder-env/bin/activate`
* Testing:
    * make sure pyplot windows are displayed correctly (plot viewer) with enough dpi
    * make sure this is also the case for plots generated by the GUI


**Tox configuration in** `tox.ini <https://github.com/drocheam/optrace/blob/main/tox.ini>`_

.. literalinclude:: ../../../tox.ini
   :language: ini

